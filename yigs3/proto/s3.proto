syntax = "proto3";

service S3 {
	// TODO: Redefine parameters

	rpc ListBuckets(BaseRequest) returns (ListBucketsResponse) {}
	rpc CreateBucket(Bucket) returns (BaseResponse) {}
	rpc DeleteBucket(Bucket) returns (BaseResponse) {}
	rpc GetBucket(BaseRequest) returns (Bucket) {}
	rpc ListObjects(ListObjectsRequest) returns (ListObjectResponse) {}
	rpc CountObjects(ListObjectsRequest) returns (CountObjectsResponse) {}
	//rpc CreateObject(Object) returns (BaseResponse) {}
	rpc PutObject(PutObjectRequest) returns (BaseResponse) {}
	rpc UpdateObject(Object) returns (BaseResponse) {}
	rpc GetObject(GetObjectInput) returns (Object) {}
	rpc DeleteObject(DeleteObjectInput) returns (BaseResponse) {}
	rpc GetTierMap(BaseRequest) returns (GetTierMapResponse) {}
	rpc UpdateObjMeta(UpdateObjMetaRequest) returns (BaseResponse) {}
	rpc GetStorageClasses(BaseRequest) returns (GetStorageClassesResponse) {}
	rpc GetBackendTypeByTier(GetBackendTypeByTierRequest) returns (GetBackendTypeByTierResponse) {}
	rpc DeleteBucketLifecycle(DeleteLifecycleInput) returns (BaseResponse) {}
	rpc UpdateBucket(Bucket) returns (BaseResponse) {}
	rpc ListBucketUploadRecords(ListBucketPartsRequest) returns (ListBucketPartsResponse) {}

	rpc InitMultipartUpload(BaseRequest) returns (BaseResponse) {}
	rpc AbortMultipartUpload(BaseRequest) returns (BaseResponse) {}
	rpc CompleteMultipartUpload(BaseRequest) returns (BaseResponse) {}
	rpc UploadPart(BaseRequest) returns (BaseResponse) {}
	rpc ListObjectParts(BaseRequest) returns (BaseResponse) {}
	rpc AppendObject(BaseRequest) returns (BaseResponse) {}
	rpc PostObject(BaseRequest) returns (BaseResponse) {}

	// For lifecycle, may need some change.
	rpc AddUploadRecord(MultipartUploadRecord) returns (BaseResponse) {}
	rpc DeleteUploadRecord(MultipartUploadRecord) returns (BaseResponse) {}

	rpc HeadObject(BaseObjRequest) returns (Object) {}
	rpc CopyObject(CopyObjectRequest) returns (BaseResponse) {}
	rpc CopyObjPart(CopyObjPartRequest) returns (CopyObjPartResponse) {}
	rpc PutObjACL(PutObjACLRequest) returns (BaseResponse) {}
	rpc GetObjACL(BaseObjRequest) returns (ObjACL) {}
	rpc GetBucketLocation(BaseRequest) returns (BaseResponse) {}
	rpc GetBucketVersioning(BaseBucketRequest) returns (BucketVersioning) {}
	rpc PutBucketVersioning(PutBucketVersioningRequest) returns (BaseResponse) {}
	rpc PutBucketACL(PutBucketACLRequest) returns (BaseResponse) {}
	rpc GetBucketACL(BaseBucketRequest) returns (BucketACL) {}
	rpc PutBucketCORS(BaseRequest) returns (BaseResponse) {}
	rpc GetBucketCORS(BaseRequest) returns (BaseResponse) {}
	rpc DeleteBucketCORS(BaseRequest) returns (BaseResponse) {}
	rpc PutBucketPolicy(BaseRequest) returns (BaseResponse) {}
	rpc GetBucketPolicy(BaseRequest) returns (BaseResponse) {}
	rpc DeleteBucketPolicy(BaseRequest) returns (BaseResponse) {}
	rpc HeadBucket(BaseRequest) returns (Bucket) {}
}

message CopyObjectRequest {
	string Context = 1; // if no context provided, then owner of the target object will keep the same as source object
	string objKey = 2;
	string srcBucket = 3;
	string targetBucket = 4;
	string targetBackend = 5;
	int32  targetTier = 6;
}

message PutObjectRequest {
	Object meta = 1;
	bytes data = 2; // TODO: ???????
}

message PutBucketVersioningRequest {
	string Context = 1;
	string Status = 2;
}

message PutBucketACLRequest {
	string Context = 1;
	BucketACL ACLConfig = 2;
}

message BucketACL {
	string BucketName = 1;
	string ACL = 2;
	// TODO: Redefine parameters if required.
}

message BucketVersioning {
	string Status = 1;
}

message BaseBucketRequest {
	string Context = 1;
	string BucketName = 2;
}

message BaseObjRequest {
	string Context = 1;
	string BucketName = 2;
	string ObjectKey = 3;
}

message PutObjACLRequest {
	string Context = 1;
	ObjACL ACLConfig = 2;
}

message ObjACL {
	string BucketName = 1;
	string ObjectKey = 2;
	string ACL = 3;
	// TODO: Redfine parameters if required.
}

message CopyObjPartRequest {
	string Context = 1;
	string SourceBucket = 2;
	string SourceObj = 3;
	string TargetBucket = 4;
	string TargetObject = 5;
	string UploadID = 6;
	string PartID = 7;
	// TODO: Add more parameters
}

message CopyObjPartResponse {
	string Context = 1;
	string LastModified = 2;
	string Etag = 3;
}

message ServerSideEncryption {
	string cryptScheme = 1;
	string algorithm = 2;
	string masterKeyId = 3;
	bool mandtory = 4;
}

message VersioningConfiguration {
	string Status = 1;
	string MfaDelete = 2;
}

message RedirectAllRequestsTo {
	string hostName = 1;
	repeated string protocol = 2;
}

message Redirect {
	string protocol = 1;
	string hostName = 2;
	string replaceKeyPrefixWith = 3;
	string replaceKeyWith = 4;
	string httpRedirectCode = 5;
}

message Condition {
	string keyPrefixEquals = 1;
	string httpErrorCodeReturnedEquals = 2;
}

message RoutingRules {
	Redirect redirect = 1; 
	Condition condition = 2;
}

message WebsiteConfiguration {
	string indexDocument = 1;
	string errorDocument = 2;
	RedirectAllRequestsTo redirectAllRequestsTo = 3;
	repeated RoutingRules routingRules = 4;
}

message CORSConfiguration {
	string id = 1;
	string allowedMethods = 2;
	string allowedOrigins = 3;
	string allowedHeaders = 4;
	string maxAgeSeconds = 5;
	string exposedHeaders = 6;
}

message Destination {
	string bucket = 1;
	string storageClass = 2;
}

message ReplicationRole {
	string id = 1;
	string prefix = 2;
	bool enabled = 3;
	Destination destination = 4;
}

message ReplicationConfiguration {
	string role = 1;
	repeated ReplicationRole rules = 2;
}

message Tag {
	string key = 1;
	string val = 2;
}

message LifecycleFilter {
	//Object prefix for lifecycle filter
	string prefix = 1;
	//Tags will not be used for current release
	//repeated Tag tags = 2;
}

message Action {
	//Name of the action transition/expiration
	string name = 1;   // expiration or transition
	//Days after creation of object
	int32 days = 2;
	//Delete marker in case of expiration for versioned bucket
	string deleteMarker = 3;
	//Storage class tier of the object where object is to be transitioned
	int32 tier = 4;
	// Destination backend of the object/bucket for Cross-cloud transition
	string backend = 5;

}

message AbortMultipartUpload {
  	//Days after which the abort operation will be performed on incomplete upload
	int32 daysAfterInitiation = 1;
}

message LifecycleRule {
	string id = 1;
	string status = 2;
	LifecycleFilter filter = 3;
	repeated Action actions = 4;
	AbortMultipartUpload abortIncompleteMultipartUpload = 5;
}

message ReplicationInfo {
	string status = 1;
	string backend = 2;
	string storageClass = 3;
}

message Bucket {
	string id = 1;
	string name = 2;
	string ownerId = 3;
	string ownerDisplayName = 4;
	string cors = 5;
	string lifeCycle = 6;
	string acl = 7;
	string policy = 8;
	int64 createTime = 9;
	int64 usages = 10;
	int32 tier = 11;
	string versioning = 12;  // Enable, suspend, disable
	string defaultLocation = 13; // Means backend
	string replicationConf = 14;
	string sseConf = 15;
	string websiteConf = 16;
	bool deleted = 17;
}

message Partion {
	string key = 1;
	int64 partNumber = 2;
	int64 size = 3;
	string etag = 4;
	int64 lastModified = 5;
}

message Version {
    string versionid = 1;
    string etag = 2;
    string isLatest = 3;
    int64 lastModified = 4;
    int64 size = 5;
}

message Object {
	string objectKey = 1;
	string bucketName = 2;
	string tenantId = 3;
	string userId = 4;
	string location = 5;
	string versionId = 6;
	int64 size = 7;
	int64 lastModifiedTime = 8;
	int32 tier = 9;
	string storageClass = 10;
	// For backend of YIG ceph, objectId is random string, for other backends, is the key in the backend related bucket.
	string objectId = 11;  // id used in backend
	string etag = 12;
	string contentType = 13;
	string acl = 14;
	bool nullVersion = 15;
	bool deleteMarker = 16;
	string sseType = 17;
	bytes encryptionKey = 18;  // TODO: How to define blob data of TiDB in protobuf??
	bytes initilizationVector = 19;
	string customeAttributes = 20;
}

message ListBucketsResponse {
	repeated Bucket buckets = 1;
}

message BaseResponse {
	string errorCode = 1;
	string msg = 2;
}

message BaseRequest {
	string id = 1;
}

/*message CommonRequest {
	string context = 1;
	string id = 2;
}*/

message ListObjectsRequest {
    // Bucket is a required field
    string bucket = 1;
    string delimiter = 2;
	map<string, string> filter = 3;
	int32  offset = 4;
	int32  limit = 5;
}

message ListObjectResponse {
	repeated Object listObjects = 1;
}

message CountObjectsResponse {
	int64 count = 1;
	int64 size = 2;
}

message DeleteObjectInput {
    string bucket = 1;
    string key = 2;
    string versioId = 3;
    //int64  lastModified = 5;
}

message GetObjectInput {
    string bucket = 1;
    string key = 2;
    string versionId = 3;
}

message MultipartUpload {
    string bucket = 1;
    string key = 2;
    string uploadId = 3;
	string objectId = 4;  // id used in backend
}

message ListParts {
    string bucket = 1;
    string key = 2;
    string uploadId = 3;
    int64  maxParts = 4;
    int64  partNumberMarker = 5;
}

message TList {
	repeated int32 tier = 1;
}

message Tier2ClassName {
	map<int32, string> lst = 1;
}

message GetTierMapResponse {
	repeated string transition = 1;  // format:[from:to from:to ....]
	map<string, Tier2ClassName> tier2Name = 2;
}

message UpdateObjMetaRequest {
	string objKey = 1;
	string bucketName = 2;
	int64 lastModified = 3;
	map<string, string> setting = 4;
}

message StorageClass {
    string name = 1;
    int32  tier = 2;
}

message GetStorageClassesResponse {
    repeated StorageClass classes = 1;
}

message GetBackendTypeByTierRequest {
	int32 tier = 1;
}

message GetBackendTypeByTierResponse {
	repeated string types = 1;
}

message DeleteLifecycleInput {
	string bucket = 1;
	string ruleID = 2;
}

// TODO: Define parameter refer to data body
message MultipartUploadRecord {
	string objectKey = 1;
	string bucket	= 2;
	string backend	= 3;
	string uploadId	= 4;
	int64 initTime	= 5;
}

message ListBucketPartsRequest {
	string bucket = 1;
	string prefix = 2;
	int32  days = 3;
	int32  limit = 4;
	int32  offset = 5;
}

message ListBucketPartsResponse {
	repeated MultipartUploadRecord records = 1;
}
